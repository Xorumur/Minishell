       8       8      55
lecherb  2021_nice    408 Mar 31 19:55 .
drwxr-xr-x   3 mlecherb  2021_nice    102 Mar 31 11:53 ..
drwxr-xr-x  14 mlecherb  2021_nice    476 Mar 31 19:19 .git
drwxr-xr-x   3 mlecherb  2021_nice    102 Mar 31 13:41 .vscode
-rw-r--r--   1 mlecherb  2021_nice    914 Mar 31 18:13 Makefile
-rw-r--r--   1 mlecherb  2021_nice   2697 Mar 31 20:22 a
drwxr-xr-x   4 mlecherb  2021_nice    136 Mar 31 13:47 includes
drwxr-xr-x  93 mlecherb  2021_nice   3162 Mar 31 18:09 libft
-rw-r--r--   1 mlecherb  2021_nice   2697 Mar 31 18:16 main.c
-rw-r--r--   1 mlecherb  2021_nice   2480 Mar 31 19:55 main.o
-rwxr-xr-x   1 mlecherb  2021_nice  20252 Mar 31 19:55 minishell
drwxr-xr-x  15 mlecherb  2021_nice    510 Mar 31 19:55 srcs
                                                                          */
/* ************************************************************************** */

#include "includes/minishell.h"

void	init_data(void)
{
	g_data.quoterror = FALSE;
	g_data.status.is_fork = FALSE;
	g_data.status.is_redir = FALSE;
	g_data.status.is_pipe = FALSE;
	g_data.status.is_heredoc = FALSE;
}

void	tokenizer(void)
{
	t_tokenlist		*tokens;
	t_tokenlist		*curr_node;
	t_token			*curr_tok;

	tokens = NULL;
	curr_tok = lexer_get_next_token(g_data.lexer);
	while (curr_tok != NULL)
	{
		curr_node = ft_lstnew_token(curr_tok);
		ft_lstadd_back_token(&tokens, curr_node);
		curr_tok = lexer_get_next_token(g_data.lexer);
	}
	g_data.tokens = tokens;
}

void	minishell(void)
{
	init_data();
	g_data.cmd = readline("|---Mathiew * minishell---$> ");
	if (g_data.cmd && ft_strlen(g_data.cmd))
	add_history(g_data.cmd);
	if (g_data.cmd == NULL)
	{
		ft_putstr_fd("exit\n", STDERR_FILENO);
		exit(1);
	}
	else
	{
		/*
		** The command is valid -> Tokenize and execute it :
		*/
		signal(SIGQUIT, handle_sigquit); // Activate handler for sigquit (^\Quit: 3)
		g_data.lexer = init_lexer(g_data.cmd);
		tokenizer();
		t_tokenlist* tmp = g_data.tokens;
		while (tmp)
		{
			printf("id = %i value = [%s]\n", tmp->token->e_type, tmp->token->value);
			tmp = tmp->next;
		}
		if (g_data.quoterror == 0)
			;// Execute command
		else
			printf("Error: quote error\n");
		// At the end of every commands free everything that is used for commands
		// Free token list
		free_all();
	}
	free(g_data.cmd);
}

int	main(int argc, char **argv, char **env)
{
	(void)argc;
	(void)argv;

	// Check if env exist before stocking it
	if (env[0])
	{
		g_data.status.is_env = TRUE;
		init_data_env(env);
	}
	else
		g_data.status.is_env = FALSE;
	signal(SIGQUIT, SIG_IGN);
	while (42)
	{
		minishell();
	}
	return (0);
}
